package com.tteonago;

import java.util.List;
import java.util.stream.Collectors;

import org.junit.jupiter.api.Test;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import com.tteonago.exception.TteonagoException;
import com.tteonago.hotel.controller.AreaController;
import com.tteonago.hotel.dto.HotelDTO;
import com.tteonago.hotel.entity.Area;
import com.tteonago.hotel.entity.Hotel;
import com.tteonago.hotel.entity.HotelImage;
import com.tteonago.hotel.repository.AreaRepository;
import com.tteonago.hotel.repository.HotelImageRepository;
import com.tteonago.hotel.repository.HotelRepository;

@SpringBootTest
class TteonagoApplicationTests {
	
	 @Autowired
	 private AreaController mapController;
	 @Autowired
	 private AreaRepository areaRepository;
	 @Autowired
	 private HotelRepository hotelRepository;
	 @Autowired
	 private HotelImageRepository hotelImageRepository;
		
	private ModelMapper modelMapper = new ModelMapper();
   
	    @Test
	    void testMap() {
//	        Model model = new org.springframework.ui.ConcurrentModel();
//	        String lat = "37.529359";
//	        String lng = "126.982102";
//	        
//	        //String result = mapController.map(model, lat, lng);
//	        
//	        assertThat(result).isEqualTo("pages/map");
//	        assertThat(model.getAttribute("lat")).isEqualTo(new BigDecimal(lat));
//	        assertThat(model.getAttribute("lng")).isEqualTo(new BigDecimal(lng));
//	        
//	        BigDecimal actualLat = (BigDecimal) model.getAttribute("lat");
//	        BigDecimal actualLng = (BigDecimal) model.getAttribute("lng");
//
//	        assertThat(actualLat).isEqualTo(new BigDecimal(lat));
//	        assertThat(actualLng).isEqualTo(new BigDecimal(lng));
	    	
	        
	    }
//		public List<HotelDTO> getHotelByArea() throws TteonagoException {
//			Area area = areaRepository.findById("10")
//			        .orElseThrow(() -> new TteonagoException("Area not found"));
//		List<Hotel> hotels = hotelImageRepository.findHotelAndImgByArea(area);
//			
//			return hotels.stream()
//					.map(hotel -> modelMapper.map(hotel, HotelDTO.class))
//					.collect(Collectors.toList());
//		}
	    
	   
}
